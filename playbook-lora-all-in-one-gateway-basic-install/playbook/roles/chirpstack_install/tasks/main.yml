#Chirpstack Install
- name: Chirpstack Install
  debug:
    msg: "Chirpstack Install"

    #chirpstack
- name: Ensure directories exists for chirpstack app config files
  file:
    path: "/etc/{{ item }}"
    state: directory
  with_items:
    - "chirpstack-gateway-bridge"
    - "chirpstack-network-server"
    - "chirpstack-application-server"

- name: Download chirpstack app config files
  get_url: 
    url: "{{ item.src }}"
    dest: "/etc/{{ item.dest }}"
    mode: "0644"
    checksum: "md5:{{ item.checksum }}"
    force: yes #If file already exists, still download file and replace if contents are different
  with_items:
    - { src: "{{ aws_url }}/chirpstack_config/chirpstack-application-server/chirpstack-application-server.toml", dest: "chirpstack-application-server", checksum: "{{ cas_config_md5 }}"}
    - { src: "{{ aws_url }}/chirpstack_config/chirpstack-network-server/chirpstack-network-server.toml", dest: "chirpstack-network-server", checksum: "{{ cns_config_md5 }}"}
    - { src: "{{ aws_url }}/chirpstack_config/chirpstack-gateway-bridge/chirpstack-gateway-bridge.toml", dest: "chirpstack-gateway-bridge", checksum: "{{ cgb_config_md5 }}"}

- name: pull chirpstack gateway bridge image from ECR
  command: 'docker pull public.ecr.aws/n6v5k0e3/chirpstack-gateway-bridge:3.10.0-{{ image_arch }}' 
  register: docker_result
  changed_when: docker_result.stdout is not search("Image is up to date")

- name: pull chirpstack network server image from ECR
  command: 'docker pull public.ecr.aws/n6v5k0e3/chirpstack-network-server:3.12.3-{{ image_arch }}' 
  register: docker_result
  changed_when: docker_result.stdout is not search("Image is up to date")

- name: pull chirpstack application server image from ECR
  command: 'docker pull public.ecr.aws/n6v5k0e3/chirpstack-application-server:3.14.0-{{ image_arch }}'
  register: docker_result
  changed_when: docker_result.stdout is not search("Image is up to date")

- name: start chirpstack gateway bridge container
  command: 'docker run --name chirpstack-gateway-bridge -p 1700:1700/udp --add-host mqttserver:172.18.0.1 --network "chirpbridge" --ip 172.18.0.4 -v /etc/chirpstack-gateway-bridge:/etc/chirpstack-gateway-bridge -d --restart unless-stopped public.ecr.aws/n6v5k0e3/chirpstack-gateway-bridge:3.10.0-{{ image_arch }}'

- name: start chirpstack network server container
  command: 'docker run --name chirpstack-network-server --add-host mqttserver:172.18.0.1 --network "chirpbridge" --ip 172.18.0.5 -v /etc/chirpstack-network-server:/etc/chirpstack-network-server -d --restart unless-stopped public.ecr.aws/n6v5k0e3/chirpstack-network-server:3.12.3-{{ image_arch }}'

- name: start chirpstack application server container
  command: 'docker run --name chirpstack-application-server -p 8080:8080 --add-host mqttserver:172.18.0.1 --network "chirpbridge" --ip 172.18.0.6 -v /etc/chirpstack-application-server:/etc/chirpstack-application-server -d --restart unless-stopped public.ecr.aws/n6v5k0e3/chirpstack-application-server:3.14.0-{{ image_arch }}'

- name: chirpstack application server start confirmation
  block:
    - name: wait for chirpstack application server to start up (this can take up to 3 minutes)
      command: docker logs chirpstack-application-server
      register: caslogs
      retries: 18
      delay: 10
      until: caslogs.stderr.find("starting join-server api") != -1 or caslogs.stdout.find("starting join-server api") != -1
      any_errors_fatal: true
      changed_when: false

  rescue:
    - name: Chirpstack application server failed to start within 3 minutes
      fail:
        msg: "FAILURE: Chirpstack Application Server failed to start within 3 minutes. Check TE Sensor Demo Kit Assembly Instructions for troubleshooting steps to take."