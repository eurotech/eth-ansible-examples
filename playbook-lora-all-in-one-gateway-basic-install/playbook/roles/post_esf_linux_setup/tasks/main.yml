#POST-ESF SETUP
- name: Post-ESF Setup
  debug:
    msg: "Post-ESF Setup"

# #bounce docker service to put iptable rules back. This is needed right after ESF install due to
# #the ESF install removing the existing iptable rules.
# - name: restart docker
#   systemd:
#     name: docker
#     state: restarted 

#LoRa setup
    
    #redis
- name: pull redis image from DockerHub
  command: docker pull redis:6.2.1-alpine3.13
  register: docker_result
  changed_when: docker_result.stdout is not search("Image is up to date")

- name: create redis data volume
  command: docker volume create redis-data-chirpstack
    
- name: start redis container
  command: docker run --name redis-chirpstack --network "chirpbridge" --ip 172.18.0.2 -v redis-data-chirpstack:/data -d --restart unless-stopped redis:6.2.1-alpine3.13 redis-server --appendonly yes

- name: redis server start confirmation block
  block:
    - name: wait for redis server to start up (this can take up to 3 minutes)
      command: docker logs redis-chirpstack
      register: redislogs
      retries: 18
      delay: 10
      until: redislogs.stderr.find("Ready to accept connections") != -1 or redislogs.stdout.find("Ready to accept connections") != -1
      any_errors_fatal: true
      changed_when: false

  rescue:
    - name: Redis server failed to start within 3 minutes
      fail:
        msg: "FAILURE: Redis server failed to start within 3 minutes. Check TE Sensor Demo Kit Assembly Instructions for troubleshooting steps to take."
    
    #postgres
- name: Ensure directory exists for PostGreSQL support files
  file:
    path: /etc/postgres_chirpstack/
    state: directory

- name: Download support files for PostGreSQL
  get_url: 
    url: "{{ item.src }}"
    dest: /etc/postgres_chirpstack/
    mode: "0644"
    checksum: "md5:{{ item.checksum }}"
    force: yes #If file already exists, still download file and replace if contents are different
  with_items:
    - { src: "{{ aws_url }}/postgres_init/001-init-chirpstack_ns.sh", checksum: "{{ postgres_init_1_md5 }}"}
    - { src: "{{ aws_url }}/postgres_init/002-init-chirpstack_as.sh", checksum: "{{ postgres_init_2_md5 }}"}
    - { src: "{{ aws_url }}/postgres_init/003-chirpstack_as_trgm.sh", checksum: "{{ postgres_init_3_md5 }}"}
    - { src: "{{ aws_url }}/postgres_init/004-chirpstack_as_hstore.sh", checksum: "{{ postgres_init_4_md5 }}"}

- name: pull postgres image from DockerHub
  command: docker pull postgres:9.6.21-alpine
  register: docker_result
  changed_when: docker_result.stdout is not search("Image is up to date")

- name: create postgres data volume
  command: docker volume create postgres-data-chirpstack
    
- name: start postgres container
  command: docker run --name postgres-chirpstack --network "chirpbridge" --ip 172.18.0.3 -v postgres-data-chirpstack:/var/lib/postgresql/data -v /etc/postgres_chirpstack:/docker-entrypoint-initdb.d -e POSTGRES_PASSWORD=root -d --restart unless-stopped postgres:9.6.21-alpine

- name: postgres server start confirmation
  block:
    - name: wait for Postgres server to start up (this can take up to 6 minutes)
      command: docker logs postgres-chirpstack
      register: postgreslogs
      retries: 36
      delay: 10
      until: >-
        postgreslogs.stderr | regex_search("PostgreSQL init process complete; ready for start up\\.\n\nLOG.  database system was shut down at .*$\nLOG.  MultiXact member wraparound protections are now enabled$\nLOG.  database system is ready to accept connections$\nLOG.  autovacuum launcher started") != ""
        or
        postgreslogs.stdout | regex_search("PostgreSQL init process complete; ready for start up\\.\n\nLOG.  database system was shut down at .*$\nLOG.  MultiXact member wraparound protections are now enabled$\nLOG.  database system is ready to accept connections$\nLOG.  autovacuum launcher started") != ""
      any_errors_fatal: true
      changed_when: false

  rescue:
    - name: Postgres server failed to start within 6 minutes
      fail:
        msg: "FAILURE: Postgres server failed to start within 6 minutes. Check TE Sensor Demo Kit Assembly Instructions for troubleshooting steps to take."

    #packet forwarder
- name: copy packet forwarder monit conf file
  copy:
    src: /etc/lora-packet-forwarder.monit.conf
    dest: /etc/monit.d/
    mode: preserve

- name: Ensure directory exists for LoRa radio configuration files
  file:
    path: /opt/lora/
    state: directory

- name: Download LoRa radio configuration files
  get_url: 
    url: "{{ item.src }}"
    dest: /opt/lora/
    mode: "0644"
    checksum: "md5:{{ item.checksum }}"
    force: yes #If file already exists, still download file and replace if contents are different
  with_items:
    - { src: "{{ aws_url }}/packet_forwarder/global_conf.json", checksum: "{{ global_conf_md5 }}"}
    - { src: "{{ aws_url }}/packet_forwarder/local_conf.json", checksum: "{{ local_conf_md5 }}"}

- name: start packet forwarder
  systemd:
    name: lora-packet-forwarder
    state: restarted
    #enabled: yes #this doesn't work due to bug, see workaround in next task

#Enable packet forwarder service
#Service must be disabled then enabled. Simply enabling may not persist over reboot due to Ansible bug. 
#This service is an older system V service that is wrapped to work with systemd. Therefore, the systemctl reenable command can't be used 
#For these older system V services, two separate commands to first disable, then enable the service must be performed. 
- name: disable packet forwarder start-at-boot
  become: yes
  shell: systemctl disable lora-packet-forwarder

- name: enable packet forwarder start-at-boot
  become: yes
  shell: systemctl enable lora-packet-forwarder

- name: packet forwarder start confirmation
  block:
    - name: wait for packet forwarder log to indicate packet forwarder is successfully started (this can take up to 10 minutes)
      wait_for:
        path: /var/log/lora-pkt-fwd.log
        search_regex: 'JSON up:'
        state: present
        delay: 0
        sleep: 20
        timeout: 600
      any_errors_fatal: true
      changed_when: false

  rescue:
    - name: Packet forwarder failed to start within 10 minutes
      fail:
        msg: "FAILURE: Packet forwarder failed to start within 10 minutes. Check TE Sensor Demo Kit Assembly Instructions for troubleshooting steps to take."