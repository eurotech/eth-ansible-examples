#Chirpstack Setup
- name: Chirpstack Configure
  debug:
    msg: "Chirpstack Configure"

#This task extracts the gatewayID from the LoRa radio properties file. 
#This is a json file that is read in, formatted, parsed, and has the desired property extracted and saved. 
#CONTEXT: The gatewayID is required for configuring Chirpstack, and it is contained in a json file. 
#GOAL: Extract the gateway_ID json property from the json file. 
#BREAKDOWN OF SET_FACT:
#"{{ (lookup('file', '/opt/lora/global_conf.json') | from_json).get('gateway_conf').get('gateway_ID') }}"
#     |------------STEP 1-------------------------|
#    |-------------------------STEP 2-------------------------|
#                                                              |--------STEP 3----|
#                                                                                  |----STEP 4------|
#
# STEP 1: lookup('file', '/opt/lora/global_conf.json')
#         This reads in the file so it can be manipulated by the filters
# STEP 2: (xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx | from_json)
#         This applies the from_json filter to the imported file. This filter formats the json from the file into a dictionary so it be used.
# STEP 3: .get('gateway_conf')
#         Retrieve the gateway_conf object from the json data. 
# STEP 4: .get('gateway_ID')
#         Retrieve the gateway_ID object from the gateway_conf object previously retrieved. 
#
#NOTE: The order of operations/grouping is particularly important here - be very careful with the parenthesis and make sure you understand why things are grouped together as they are. 
- name: extract gatewayID from LoRa radio properties json file
  set_fact:
    gatewayID: "{{ (lookup('file', '/opt/lora/global_conf.json') | from_json).get('gateway_conf').get('gateway_ID') }}"

#verify that gatewayID is not the default value
- name: verify gatewayID (SKIP = pass)
  fail:
    msg: "gatewayID is the default value. This indicates the packet forwarder hasn't started properly. Troubleshoot the packet forwarder and try again."
  when: gatewayID == "0000000000000000"

#configure application server
- name: Get JWT Token
  uri:
    url: http://localhost:8080/api/internal/login
    method: POST
    body_format: json
    status_code: 200
    return_content: true
    headers:
      Content-Type: application/json
      Accept: application/json
    body: 
      email: "admin"
      password: "admin"
  register: response

- name: save JWT Token
  set_fact:
    jwtToken: "{{ response.json.jwt }}"

- name: Create Network Server
  uri:
    url: http://localhost:8080/api/network-servers
    method: POST
    body_format: json
    status_code: 200
    return_content: true
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: "Bearer {{ jwtToken }}"
    body:   
      networkServer: 
        name: "Basic_Network_Server"
        server: "chirpstack-network-server:8004"
        caCert: ""
        tlsCert: ""
        tlsKey: ""
        routingProfileCACert: ""
        routingProfileTLSCert: ""
        routingProfileTLSKey: ""
        gatewayDiscoveryEnabled: false
        gatewayDiscoveryInterval: 0
        gatewayDiscoveryTXFrequency: 0
        gatewayDiscoveryDR: 0

- name: Create Service Profile
  uri:
    url: http://localhost:8080/api/service-profiles
    method: POST
    body_format: json
    status_code: 200
    return_content: true
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: "Bearer {{ jwtToken }}"
    body:   
      serviceProfile:
        name: "Basic_Service_Profile"
        organizationID: "1"
        networkServerID: "1"
        ulRate: 0
        ulBucketSize: 0
        ulRatePolicy: "DROP"
        dlRate: 0
        dlBucketSize: 0
        dlRatePolicy: "DROP"
        addGWMetaData: true
        devStatusReqFreq: 0
        reportDevStatusBattery: false
        reportDevStatusMargin: false
        drMin: 0
        drMax: 4
        channelMask: null
        prAllowed: false
        hrAllowed: false
        raAllowed: false
        nwkGeoLoc: false
        targetPER: 0
        minGWDiversity: 0
        gwsPrivate: false
  register: response

- name: save service profile ID
  set_fact:
    serviceProfileID: "{{ response.json.id }}"

- name: Create Application
  uri:
    url: http://localhost:8080/api/applications
    method: POST
    body_format: json
    status_code: 200
    return_content: true
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: "Bearer {{ jwtToken }}"
    body:   
      application: 
        name: "Basic_Application"
        description: "This is a preconfigured basic application. You can use this application or create your own. You may delete this application if it is not needed."
        organizationID: "1"
        serviceProfileID: "{{ serviceProfileID }}"
        payloadCodec: ""
        payloadEncoderScript: ""
        payloadDecoderScript: ""

- name: Create Gateway
  uri:
    url: http://localhost:8080/api/gateways
    method: POST
    body_format: json
    status_code: 200
    return_content: true
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: "Bearer {{ jwtToken }}"
    body: 
      gateway:
        id: "{{ gatewayID }}"
        name: "Basic_Gateway"
        description: "This Chirpstack Gateway is preconfigured for the Eurotech basic all-in-one LoRa solution."
        location:
          latitude: 0
          longitude: 0
          altitude: 0
          source: UNKNOWN
          accuracy: 0
        organizationID: '1'
        discoveryEnabled: false
        networkServerID: '1'
        gatewayProfileID: ''
        serviceProfileID: "{{ serviceProfileID }}"

# All tasks below this line are optional and provided for convenience and as examples. 
# To Use: Uncomment the desired sections and change the relevant data to reflect your real data. 

#CREATE DEVICE PROFILE
#This example is for creating a TE 8911-A device profile. 
#Change the values indicated below for your own device(s). You will likely need to change several properties. 
#Note: This is for an OTAA device running LoRaWAN MAC 1.0.x. You will need to adjust the Chirpstack API calls if your device
#is different. See Chirpstack documentation for more information. 
- name: Create Device Profile for Example 8911-A Device
  uri:
    url: http://localhost:8080/api/device-profiles
    method: POST
    body_format: json
    status_code: 200
    return_content: true
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: "Bearer {{ jwtToken }}"
    body: 
      deviceProfile:
        name: "TE_8911A_Device" #CHANGE ME IF NEEDED
        organizationID: "1"
        networkServerID: "1"
        supportsClassB: false
        classBTimeout: 0
        pingSlotPeriod: 0
        pingSlotDR: 0
        pingSlotFreq: 0
        supportsClassC: false
        classCTimeout: 0
        macVersion: "1.0.3" #CHANGE ME IF NEEDED
        regParamsRevision: "A" #CHANGE ME IF NEEDED
        rxDelay1: 0
        rxDROffset1: 0
        rxDataRate2: 0
        rxFreq2: 0
        factoryPresetFreqs: []
        maxEIRP: 0
        maxDutyCycle: 0
        supportsJoin: true
        rfRegion: "US915"
        supports32BitFCnt: false
        payloadCodec: ""
        payloadEncoderScript: ""
        payloadDecoderScript: ""
        geolocBufferTTL: 0
        geolocMinBufferSize: 0
        tags: {}
        uplinkInterval: "14400s" #CHANGE ME IF NEEDED
        adrAlgorithmID: "default"
  register: response

- name: save device profile ID
  set_fact:
    deviceProfileID: "{{ response.json.id }}"

#CREATE DEVICE(S)
#This example is for creating TE 8911-A devices.
#NOTE: You must uncomment the Device Profile Creation tasks above. Devices require a device profile.  
#NOTE: You must uncomment and populate the otaa_sensor_list variable on the top level site.yml for this to work. 

- name: Create Example 8911-A Device(s)
  uri:
    url: http://localhost:8080/api/devices
    method: POST
    body_format: json
    status_code: 200
    return_content: true
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: "Bearer {{ jwtToken }}"
    body: 
      device:
        devEUI: "{{ item.devEUI }}"
        name: "{{ item.name }}" 
        applicationID: '1'
        description: "{{ item.description }}" 
        deviceProfileID: "{{ deviceProfileID }}"
        skipFCntCheck: false
        referenceAltitude: 0
        isDisabled: false
  loop: "{{ otaa_sensor_list }}" 

- name: Create Keys for Example 8911-A Device(s) (OTAA Device)
  uri:
    url: "http://localhost:8080/api/devices/{{ item.devEUI }}/keys"
    method: POST
    body_format: json
    status_code: 200
    return_content: true
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: "Bearer {{ jwtToken }}"
    body: 
      deviceKeys:
        appKey: '00000000000000000000000000000000' #this must be all zeros for OTAA devices
        devEUI: "{{ item.devEUI }}"
        genAppKey: ''
        nwkKey: "{{ item.appKEY }}"
  loop: "{{ otaa_sensor_list }}" 

# #CREATE A NEW CHIRPSTACK USER WITH ADMINISTRATOR RIGHTS
# - name: save example new chirpstack user variables
#   set_fact:
#     chirpstack_example_user: "ExampleAdmin@Example" #CHANGE ME. This MUST have an @ symbol in it with at least one character before and after the @, but it doesn't not need to be a properly formatted email address. 
#     chirpstack_example_password: "ExamplePassword1234" #CHANGE ME

# - name: Create New Chirpstack User with Admin Rights
#   uri:
#     url: http://localhost:8080/api/users
#     method: POST
#     body_format: json
#     status_code: 200
#     return_content: true
#     headers:
#       Content-Type: application/json
#       Accept: application/json
#       Authorization: "Bearer {{ jwtToken }}"
#     body:   
#       user:
#         sessionTTL: 0
#         isAdmin: true #Change to false to make limited user account
#         isActive: true #Change to false to disable user
#         email: "{{ chirpstack_example_user }}"
#         note: ""
#       password: "{{ chirpstack_example_password }}"

# #REMOVE DEFAULT ADMINISTRATOR ACCOUNT
# #Note: You MUST make a new administrator account before removing the default one. 
# #This example assumes you made a new admin account with the Create A New Chirpstack User with Administrator Rights section above
# - name: Get JWT Token for new admin user
#   uri:
#     url: http://localhost:8080/api/internal/login
#     method: POST
#     body_format: json
#     status_code: 200
#     return_content: true
#     headers:
#       Content-Type: application/json
#       Accept: application/json
#     body: 
#       email: "{{ chirpstack_example_user }}"
#       password: "{{ chirpstack_example_password }}"
#   register: response

# - name: save JWT Token
#   set_fact:
#     jwtToken: "{{ response.json.jwt }}"

# - name: Remove default admin user
#   uri:
#     url: http://localhost:8080/api/users/1
#     method: DELETE
#     status_code: 200
#     return_content: true
#     headers:
#       Content-Type: application/json
#       Accept: application/json
#       Authorization: "Bearer {{ jwtToken }}"