#Chirpstack Setup
- name: Chirpstack Configure
  debug:
    msg: "Chirpstack Configure"

- name: extract gatewayID from LoRa radio properties json file
  set_fact:
    gatewayID: "{{ (lookup('file', '/opt/lora/global_conf.json') | from_json).get('gateway_conf').get('gateway_ID') }}"

#verify that gatewayID is not the default value
- name: verify gatewayID (SKIP = pass)
  fail:
    msg: "gatewayID is the default value. This indicates the packet forwarder hasn't started properly. Troubleshoot the packet forwarder and try again."
  when: gatewayID == "0000000000000000"

#configure application server
- name: Get JWT Token
  uri:
    url: http://localhost:8080/api/internal/login
    method: POST
    body_format: json
    status_code: 200
    return_content: true
    headers:
      Content-Type: application/json
      Accept: application/json
    body: 
      email: "admin"
      password: "admin"
  register: response

- name: save JWT Token
  set_fact:
    jwtToken: "{{ response.json.jwt }}"

- name: Create Network Server
  uri:
    url: http://localhost:8080/api/network-servers
    method: POST
    body_format: json
    status_code: 200
    return_content: true
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: "Bearer {{ jwtToken }}"
    body:   
      networkServer: 
        name: "Basic_Network_Server"
        server: "chirpstack-network-server:8004"
        caCert: ""
        tlsCert: ""
        tlsKey: ""
        routingProfileCACert: ""
        routingProfileTLSCert: ""
        routingProfileTLSKey: ""
        gatewayDiscoveryEnabled: false
        gatewayDiscoveryInterval: 0
        gatewayDiscoveryTXFrequency: 0
        gatewayDiscoveryDR: 0

- name: Create Service Profile
  uri:
    url: http://localhost:8080/api/service-profiles
    method: POST
    body_format: json
    status_code: 200
    return_content: true
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: "Bearer {{ jwtToken }}"
    body:   
      serviceProfile:
        name: "Basic_Service_Profile"
        organizationID: "1"
        networkServerID: "1"
        ulRate: 0
        ulBucketSize: 0
        ulRatePolicy: "DROP"
        dlRate: 0
        dlBucketSize: 0
        dlRatePolicy: "DROP"
        addGWMetaData: true
        devStatusReqFreq: 0
        reportDevStatusBattery: false
        reportDevStatusMargin: false
        drMin: 0
        drMax: 4
        channelMask: null
        prAllowed: false
        hrAllowed: false
        raAllowed: false
        nwkGeoLoc: false
        targetPER: 0
        minGWDiversity: 0
        gwsPrivate: false
  register: response

- name: save service profile ID
  set_fact:
    serviceProfileID: "{{ response.json.id }}"

- name: Create Application
  uri:
    url: http://localhost:8080/api/applications
    method: POST
    body_format: json
    status_code: 200
    return_content: true
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: "Bearer {{ jwtToken }}"
    body:   
      application: 
        name: "Basic_Application"
        description: "This is a preconfigured basic application. You can use this application or create your own. You may delete this application if it is not needed."
        organizationID: "1"
        serviceProfileID: "{{ serviceProfileID }}"
        payloadCodec: ""
        payloadEncoderScript: ""
        payloadDecoderScript: ""
  register: response

- name: Create Gateway
  uri:
    url: http://localhost:8080/api/gateways
    method: POST
    body_format: json
    status_code: 200
    return_content: true
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: "Bearer {{ jwtToken }}"
    body: 
      gateway:
        id: "{{ gatewayID }}"
        name: "Basic_Gateway"
        description: "This Chirpstack Gateway is preconfigured for the Eurotech basic all-in-one LoRa solution."
        location:
          latitude: 0
          longitude: 0
          altitude: 0
          source: UNKNOWN
          accuracy: 0
        organizationID: '1'
        discoveryEnabled: false
        networkServerID: '1'
        gatewayProfileID: ''
        serviceProfileID: "{{ serviceProfileID }}"

#TESTING
#to make it easier, this will use the API to create the device profile and device for
#Abe's test 8911A

- name: save test 8911A devEUI
  set_fact:
    devEUI_8911: "0022A70E00000144"

- name: save test 8911A appKEY
  set_fact:
    appKEY_8911: "499C025B5227D4FAF9FEA65FA87C0709"

- name: Create Device Profile for Test Device
  uri:
    url: http://localhost:8080/api/device-profiles
    method: POST
    body_format: json
    status_code: 200
    return_content: true
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: "Bearer {{ jwtToken }}"
    body: 
      deviceProfile:
        name: "TE_8911A_Device"
        organizationID: "1"
        networkServerID: "1"
        supportsClassB: false
        classBTimeout: 0
        pingSlotPeriod: 0
        pingSlotDR: 0
        pingSlotFreq: 0
        supportsClassC: false
        classCTimeout: 0
        macVersion: "1.0.3"
        regParamsRevision: "A"
        rxDelay1: 0
        rxDROffset1: 0
        rxDataRate2: 0
        rxFreq2: 0
        factoryPresetFreqs: []
        maxEIRP: 0
        maxDutyCycle: 0
        supportsJoin: true
        rfRegion: "US915"
        supports32BitFCnt: false
        payloadCodec: ""
        payloadEncoderScript: ""
        payloadDecoderScript: ""
        geolocBufferTTL: 0
        geolocMinBufferSize: 0
        tags: {}
        uplinkInterval: "14400s"
        adrAlgorithmID: "default"
  register: response

- name: show response
  debug:
    var: response

- name: save device profile ID
  set_fact:
    deviceProfileID: "{{ response.json.id }}"

- name: show saved device profile ID
  debug:
    var: deviceProfileID

- name: Create Test Device
  uri:
    url: http://localhost:8080/api/devices
    method: POST
    body_format: json
    status_code: 200
    return_content: true
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: "Bearer {{ jwtToken }}"
    body: 
      device:
        devEUI: "{{ devEUI_8911 }}"
        name: "Demo_8911A_Device"
        applicationID: '1'
        description: "Demo 8911A Device"
        deviceProfileID: "{{ deviceProfileID }}"
        skipFCntCheck: false
        referenceAltitude: 0
        isDisabled: false
        register: response

- name: show response
  debug:
    var: response

- name: Create Keys for Test Device
  uri:
    url: "http://localhost:8080/api/devices/{{ devEUI_8911 }}/keys"
    method: POST
    body_format: json
    status_code: 200
    return_content: true
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: "Bearer {{ jwtToken }}"
    body: 
      deviceKeys:
        appKey: '00000000000000000000000000000000' #this is hardcoded for OTAA devices
        devEUI: "{{ devEUI_8911 }}"
        genAppKey: ''
        nwkKey: "{{ appKEY_8911 }}"

- name: show response
  debug:
    var: response

# - name: Create TE Kit Chirpstack User
#   uri:
#     url: http://localhost:8080/api/users
#     method: POST
#     body_format: json
#     status_code: 200
#     return_content: true
#     headers:
#       Content-Type: application/json
#       Accept: application/json
#       Authorization: "Bearer {{ jwtToken }}"
#     body:   
#       user:
#         sessionTTL: 0
#         isAdmin: true
#         isActive: true
#         email: "TEKitUser@TEKit"
#         note: ""
#       password: "CSpwTEKit"
#   register: response

# - name: show response
#   debug:
#     var: response

# - name: Get JWT Token for new user
#   uri:
#     url: http://localhost:8080/api/internal/login
#     method: POST
#     body_format: json
#     status_code: 200
#     return_content: true
#     headers:
#       Content-Type: application/json
#       Accept: application/json
#     body: 
#       email: "TEKitUser@TEKit"
#       password: "CSpwTEKit"
#   register: response

# - name: show response
#   debug:
#     var: response

# - name: save JWT Token
#   set_fact:
#     jwtToken: "{{ response.json.jwt }}"

# - name: Remove default admin user
#   uri:
#     url: http://localhost:8080/api/users/1
#     method: DELETE
#     status_code: 200
#     return_content: true
#     headers:
#       Content-Type: application/json
#       Accept: application/json
#       Authorization: "Bearer {{ jwtToken }}"
#     register: response