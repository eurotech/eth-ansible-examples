#Validate Environment
- name: Validate Environment
  debug:
    msg: "Validate Environment"

##Verify Internet Access
- name: Check for Internet Connectivity
  block:
  - name: check for internet connectivity
    command: ping -c 1 -w 2 8.8.8.8
    any_errors_fatal: true
    changed_when: false

  rescue:
    - name: Internet is unreachable
      fail:
        msg: "Can't access the internet. Please run the playbook again or troubleshoot internet connectivity if this message is displayed more than twice."

##Check Gateway Model
- name: Get Gateway Model
  command: eth_model
  register: eth_model
  changed_when: false

- name: Parse Gateway Model
  set_fact:
    gw_model: "{{ eth_model.stdout }}"

- name: Print Gateway Model
  debug:
    msg: "Detected Gateway Model: {{ gw_model }}."

- name: Verify Gateway Model is Valid (Skipped = PASS)
  fail:
    msg: "Gateway Model must be ReliaGATE 10-12 or ReliaGATE 10-14 but was {{ gw_model }}."
  when: #list implies logical AND between all list items
    - gw_model != gw_1012
    - gw_model != gw_1014

- name: Set Variables for Hardware other than ReliaGATE 10-14 (SKIP = Hardware is ReliaGATE 10-14)
  set_facts:
    image_arch: "arm32v7"

##Check EL Version
- name: Get EL Version
  command: eth_vers_os
  register: eth_vers_os
  changed_when: false

- name: Parse EL Version
  set_fact:
    el_version: "{{ eth_vers_os.stdout }}"

- name: Display EL Version
  debug:
    msg: "Detected EL Version: {{ el_version }}."

- name: Verify EL Version is Valid for ReliaGATE 10-12 (Skipped = PASS or Gateway is not a 10-12)
  fail: 
    msg: "For a ReliaGATE 10-12, the EL version must be EL_27.0.0_LoRa_Fix but was {{ el_version }}.  
          You must be running EL 27.0.0 and have the LoRa Fix installed.  
          Contact Eurotech for instructions on installing the correct EL version with the LoRa Fix."
  when: #list implies logical AND between all list items
    - gw_model == gw_1012
    - el_version != "EL_27.0.0_LoRa_fix"

- name: Verify EL Version is Valid for ReliaGATE 10-14 (Skipped = PASS or Gateway is not a 10-14)
  fail: 
    msg: "For a ReliaGATE 10-14, the EL version must be EL_27.0.2 or EL_27.1.0 but was {{ el_version }}.  
          Contact Eurotech for instructions on installing the correct version of EL."
  when: #list implies logical AND between all list items
    - gw_model == gw_1014
    - el_version != "EL_27.0.2" 
    - el_version != "EL_27.1.0"

##Check ESF Version
- name: Get ESF Version
  command: eth_vers_esf
  register: eth_vers_esf
  changed_when: false

- name: Prase Entire ESF Version
  set_fact:
    #this regex finds and returns the pattern [number].[number].[number]
    esf_version: "{{ eth_vers_esf.stdout | regex_search('\\d+\\.\\d+\\.\\d+') }}"

- name: Parse ESF Major Version Number
  set_fact:
    #esf_major_version: "{{ eth_vers_esf.stdout[4] }}"
    #this regex finds the pattern [number].[number].[number], with the target string being the first [number] (regex group 1)
    #the regex_search returns a list with a single element containing our target string
    #the [0] returns the string of our target value by getting the first (and only) element in the list
    esf_major_version: "{{ (esf_version | regex_search('(\\d+)\\.\\d+\\.\\d+', '\\1'))[0] }}"

- name: Display ESF Version info
  debug:
    msg: "Detected ESF Version: {{ esf_version }}. This is ESF {{ esf_major_version }}."

- name: type debug
  debug:
    msg: "{{esf_major_version | type_debug}}"

- name: Verify ESF Version is Valid
  fail: 
    msg: "ESF must be version 6.2.0 or later, but was {{ esf_version }}.   
          Contact Eurotech for instructions on installing the correct ESF version."
  when: #list implies logical AND between all 
    - esf_major_version != "7"
    - esf_version != "6.2.0"

##Set variables based on ESF version
#Default values are for ESF 6.2.0, so changes are only needed if using ESF 7
- name: Set variables for ESF 7 Block
  block:
    - name: Get ESF 7 Default Password (SKIP = Use default for ESF 6.2.0)
      command: eth_serial_number
      register: eth_serial_number
      changed_when: false

    - name: Save ESF 7 Default Password (SKIP = Use default for ESF 6.2.0)
      set_fact:
        esf_password: "{{ eth_serial_number.stdout }}"

    - name: Set API protocol for ESF 7 (SKIP = Use default for ESF 6.2.0)
      set_fact:
        esf_api_http_protocol: "https"

  when: esf_major_version == "7" #block when 

##Check to make sure Docker is installer
- name: Check if Docker is installed
  shell: docker ps
  register: docker_check
  failed_when: false
  changed_when: false

- name: Verify Docker is installed (Skipped = PASS)
  fail:
    msg: "Docker must be installed! Install docker, restart gateway, and run playbook again."
  when: docker_check.stderr is search("command not found")

##For ESF 6.2.0 Only, check to make sure Ansible package is installed and correctly configured
- name: Verify Ansible/REST Package is installed and configured correctly
  block:
    - name: Check for REST Configuration API Access (SKIP = ESF 7)
      uri: #attempt to get list of PIDs for configurable components to test configuration access
        url: "{{ esf_api_http_protocol }}://127.0.0.1/services/configuration/v1/configurableComponents"
        user: "{{esf_username}}"
        password: "{{esf_password}}"
        status_code: 200
        force_basic_auth: yes
        validate_certs: no
        method: GET
        return_content: yes

      register: rest_config_results

    - name: Check for REST Deploy API Access (SKIP = ESF 7)
      uri: #attempt to get list of installed packages to test deploy access
        url: "{{ esf_api_http_protocol }}://127.0.0.1/services/deploy/v1/"
        user: "{{esf_username}}"
        password: "{{esf_password}}"
        status_code: 200
        force_basic_auth: yes
        validate_certs: no
        method: GET
        return_content: yes
      register: rest_deploy_results

  rescue: 
    - name: Recover from trying to access REST APIs before they are fully started
      block:
        - name: "REST Access Pre-Check: If API REST service hasn't started yet, wait 2 minutes and try again (SKIP = Pass)"
          pause:
            minutes: 2
          
        - name: "REST Access Pre-Check: Retry REST Access (SKIP = Pass)"
          uri: #attempt to get list of installed packages to test deploy access
            url: "{{ esf_api_http_protocol }}://127.0.0.1/services/deploy/v1/"
            user: "{{esf_username}}"
            password: "{{esf_password}}"
            status_code: 200
            force_basic_auth: yes
            validate_certs: no
            method: GET
            return_content: yes
          register: rest_deploy_results
      when: rest_config_results.status == 503 #block when

      ##Check for configuration API errors first
    - name: "REST Access Check 1 of 7 (SKIP = Pass)"
      fail:
        msg: "Unable to access REST APIs. Received 503 service unavailable for configuration API access attempt. This usually means the REST API package hasn't started yet, but we already tried to wait for it to start up and it still didn't respond properly. Ensure the RestService username/password are correct, and that the user has the asset, configuration, and deploy roles assigned to it (this can be accessed via ESF). Then try again or contact Eurotech for further assistance. " 
      when: rest_config_results.status == 503

    - name: REST Access Check 2 of 7 (SKIP = Pass)
      fail:
        msg: "Unable to access REST APIs. Received 404 not found error for configuration API access attempt. This is usually because the Ansible package hasn't been installed. Install the Ansible package and configure it according to the users guide, then try again or contact Eurotech for further assistance. " 
      when: rest_config_results.status == 404 

    - name: REST Access Check 3 of 7 (SKIP = Pass)
      fail:
        msg: "Unable to access REST APIs. Received 403 unauthorized error for configuration API access attempt. Ensure the RestService username/password are correct, and that the user has the asset, configuration, and deploy roles assigned to it (this can be accessed via ESF). Then try again or contact Eurotech for further assistance. " 
      when: rest_config_results.status == 403

    - name: REST Access Check 4 of 7 (SKIP = Pass)
      fail:
        msg: "Unable to access REST APIs. Received unexpected error for configuration API access attempt: Error {{rest_config_results.status}}. Try again or contact Eurotech support for assistance."
      when: #list implies AND between each list item 
        - rest_config_results.status != 200
        - rest_config_results.status != 404
        - rest_config_results.status != 403
        - rest_config_results.status != 503
      
      ##Check for deploy API errors second
    - name: REST Access Check 5 of 7 (SKIP = Pass)
      fail:
        msg: "Unable to access REST APIs. Received 404 not found error for deploy API access attempt. This is usually because the Ansible package hasn't been installed. Install the Ansible package and configure it according to the users guide, then try again or contact Eurotech for further assistance. " 
      when: rest_deploy_results.status == 404 

    - name: REST Access Check 6 of 7 (SKIP = Pass)
      fail:
        msg: "Unable to access REST APIs. Received 403 unauthorized error for deploy API access attempt. Ensure the RestService username/password are correct, and that the user has the asset, configuration, and deploy roles assigned to it (this can be accessed via ESF). Then try again or contact Eurotech for further assistance. " 
      when: rest_deploy_results.status == 403

    - name: REST Access Check 7 of 7 (SKIP = Pass)
      fail:
        msg: "Unable to access REST APIs. Received unexpected error for deploy API access attempt: Error {{rest_config_results.status}}. Try again or contact Eurotech support for assistance."
      when: #list implies AND between each list item 
        - rest_deploy_results.status != 200
        - rest_deploy_results.status != 404
        - rest_deploy_results.status != 403

  when: esf_major_version == "6" #block when

# Create the version file
- name: Ensure directory exists for the version file
  file:
    path: /opt/lora/installer_version
    state: directory

- name: Download installer version file
  get_url: 
    url: "{{ aws_url }}/installer_script_version/lora-installer-version"
    dest: /opt/lora/installer_version/lora-installer-version
    mode: "0644"
    checksum: "md5:{{ lora_installer_version_md5 }}"
    force: yes #If file already exists, still download file and replace if contents are different