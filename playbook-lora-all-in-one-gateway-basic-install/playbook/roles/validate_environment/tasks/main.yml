#Validate Environment
- name: Validate Environment
  debug:
    msg: "Validate Environment"

##Verify Internet Access
- name: Check for Internet Connectivity
  block:
  - name: check for internet connectivity
    command: ping -c 1 -w 2 8.8.8.8
    any_errors_fatal: true
    changed_when: false

  rescue:
    - name: Internet is unreachable
      fail:
        msg: "Can't access the internet. Please run the playbook again or troubleshoot internet connectivity if this message is displayed more than twice."

##Check Gateway Model
- name: Get Gateway Model
  command: eth_model
  register: eth_model
  changed_when: false

- name: Parse Gateway Model
  set_fact:
    gw_model: "{{ eth_model.stdout }}"

- name: Print Gateway Model
  debug:
    msg: "Detected Gateway Model: {{ gw_model }}."

- name: Verify Gateway Model is Valid (Skipped = PASS)
  fail:
    msg: "Gateway Model must be ReliaGATE 10-12 or ReliaGATE 10-14 but was {{ gw_model }}."
  when: #list implies logical AND between all list items
    - gw_model != gw_1012
    - gw_model != gw_1014

##Check EL Version
- name: Get EL Version
  command: eth_vers_os
  register: eth_vers_os
  changed_when: false

- name: Parse EL Version
  set_fact:
    el_version: "{{ eth_vers_os.stdout }}"

- name: Display EL Version
  debug:
    msg: "Detected EL Version: {{ el_version }}."

- name: Verify EL Version is Valid for ReliaGATE 10-12 (Skipped = PASS or Gateway is not a 10-12)
  fail: 
    msg: "For a ReliaGATE 10-12, the EL version must be EL_27.0.0_LoRa_Fix but was {{ el_version }}.  
          You must be running EL 27.0.0 and have the LoRa Fix installed.  
          Contact Eurotech for instructions on installing the correct EL version with the LoRa Fix."
  when: #list implies logical AND between all list items
    - gw_model == gw_1012
    - el_version != "EL_27.0.0_LoRa_fix"

- name: Verify EL Version is Valid for ReliaGATE 10-14 (Skipped = PASS or Gateway is not a 10-14)
  fail: 
    msg: "For a ReliaGATE 10-14, the EL version must be EL_27.0.2 or EL_27.1.0 but was {{ el_version }}.  
          Contact Eurotech for instructions on installing the correct version of EL."
  when: #list implies logical AND between all list items
    - gw_model == gw_1014
    - el_version != "EL_27.0.2" 
    - el_version != "EL_27.1.0"

##Check ESF Version
- name: Get ESF Version
  command: eth_vers_esf
  register: eth_vers_esf
  changed_when: false

- name: Prase Entire ESF Version
  set_fact:
    esf_version: "{{ eth_vers_esf.stdout }}"

- name: Parse ESF Major Version Number
  set_fact:
    esf_major_version: "{{ eth_vers_esf.stdout[4] }}"

- name: Display ESF Version info
  debug:
    msg: "Detected ESF Version: {{ esf_version }}. This is ESF {{ esf_major_version }}."

- name: Verify ESF Version is Valid
  fail: 
    msg: "ESF must be version 6.2.0 or later, but was {{ esf_version }}.   
          Contact Eurotech for instructions on installing the correct ESF version."
  when: #list implies logical AND between all 
    - esf_major_version != "7"
    - esf_version != "ESF_6.2.0"

##Set variables based on ESF version
#Default values are for ESF 6.2.0, so changes are only needed if using ESF 7
- name: Set variables for ESF 7 Block
  block:
    - name: Get ESF 7 Default Password (SKIP = Use default for ESF 6.2.0)
      command: eth_serial_number
      register: eth_serial_number
      changed_when: false

    - name: Save ESF 7 Default Password (SKIP = Use default for ESF 6.2.0)
      set_fact:
        esf_password: "{{ eth_serial_number.stdout }}"

    - name: Set API protocol for ESF 7 (SKIP = Use default for ESF 6.2.0)
      set_fact:
        esf_api_http_protocol: "https"

  when: esf_major_version == "7" #block when 

##Check to make sure Docker is installer
- name: Check if Docker is installed
  shell: docker ps
  register: docker_check
  failed_when: false
  changed_when: false

- name: Verify Docker is installed (Skipped = PASS)
  fail:
    msg: "Docker must be installed! Install docker, restart gateway, and run playbook again."
  when: docker_check.stderr is search("command not found")

# Create the version file
- name: Ensure directory exists for the version file
  file:
    path: /opt/lora/installer_version
    state: directory

- name: Download installer version file
  get_url: 
    url: "{{ aws_url }}/installer_script_version/lora-installer-version"
    dest: /opt/lora/installer_version/lora-installer-version
    mode: "0644"
    checksum: "md5:{{ lora_installer_version_md5 }}"
    force: yes #If file already exists, still download file and replace if contents are different